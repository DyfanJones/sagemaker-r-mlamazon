% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tensorflow_estimator.R
\name{TensorFlow}
\alias{TensorFlow}
\title{TensorFlow Class}
\description{
Handle end-to-end training and deployment of user-provided TensorFlow code.
}
\section{Super classes}{
\code{\link[R6sagemaker.common:EstimatorBase]{R6sagemaker.common::EstimatorBase}} -> \code{\link[R6sagemaker.common:Framework]{R6sagemaker.common::Framework}} -> \code{TensorFlow}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TensorFlow$new()}}
\item \href{#method-create_model}{\code{TensorFlow$create_model()}}
\item \href{#method-hyperparameters}{\code{TensorFlow$hyperparameters()}}
\item \href{#method-transformer}{\code{TensorFlow$transformer()}}
\item \href{#method-clone}{\code{TensorFlow$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="compile_model">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-compile_model}{\code{R6sagemaker.common::EstimatorBase$compile_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="delete_endpoint">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-delete_endpoint}{\code{R6sagemaker.common::EstimatorBase$delete_endpoint()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="deploy">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-deploy}{\code{R6sagemaker.common::EstimatorBase$deploy()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="disable_profiling">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-disable_profiling}{\code{R6sagemaker.common::EstimatorBase$disable_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="enable_default_profiling">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-enable_default_profiling}{\code{R6sagemaker.common::EstimatorBase$enable_default_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="enable_network_isolation">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-enable_network_isolation}{\code{R6sagemaker.common::EstimatorBase$enable_network_isolation()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="fit">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-fit}{\code{R6sagemaker.common::EstimatorBase$fit()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="format">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-format}{\code{R6sagemaker.common::EstimatorBase$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="get_vpc_config">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-get_vpc_config}{\code{R6sagemaker.common::EstimatorBase$get_vpc_config()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_debugger_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_debugger_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_debugger_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_profiler_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_profiler_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_profiler_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_tensorboard_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_tensorboard_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_tensorboard_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="logs">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-logs}{\code{R6sagemaker.common::EstimatorBase$logs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="prepare_workflow_for_training">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-prepare_workflow_for_training}{\code{R6sagemaker.common::EstimatorBase$prepare_workflow_for_training()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="register">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-register}{\code{R6sagemaker.common::EstimatorBase$register()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="update_profiler">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-update_profiler}{\code{R6sagemaker.common::EstimatorBase$update_profiler()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="wait">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-wait}{\code{R6sagemaker.common::EstimatorBase$wait()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id=".prepare_for_training">}\href{../../R6sagemaker.common/html/Framework.html#method-.prepare_for_training}{\code{R6sagemaker.common::Framework$.prepare_for_training()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id="attach">}\href{../../R6sagemaker.common/html/Framework.html#method-attach}{\code{R6sagemaker.common::Framework$attach()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id="training_image_uri">}\href{../../R6sagemaker.common/html/Framework.html#method-training_image_uri}{\code{R6sagemaker.common::Framework$training_image_uri()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a ``TensorFlow`` estimator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlow$new(
  py_version = NULL,
  framework_version = NULL,
  model_dir = NULL,
  image_uri = NULL,
  distribution = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{py_version}}{(str): Python version you want to use for executing your model training
code. Defaults to ``None``. Required unless ``image_uri`` is provided.}

\item{\code{framework_version}}{(str): TensorFlow version you want to use for executing your model
training code. Defaults to ``None``. Required unless ``image_uri`` is provided.
List of supported versions:
https://github.com/aws/sagemaker-python-sdk#tensorflow-sagemaker-estimators.}

\item{\code{model_dir}}{(str): S3 location where the checkpoint data and models can be exported to
during training (default: None). It will be passed in the training script as one of
the command line arguments. If not specified, one is provided based on
your training configuration:
* *distributed training with SMDistributed or MPI with Horovod* - ``/opt/ml/model``
* *single-machine training or distributed training without MPI* - \
``s3://{output_path}/model``
* *Local Mode with local sources (file:// instead of s3://)* - \
``/opt/ml/shared/model``
To disable having ``model_dir`` passed to your training script,
set ``model_dir=False``.}

\item{\code{image_uri}}{(str): If specified, the estimator will use this image for training and
hosting, instead of selecting the appropriate SageMaker official image based on
framework_version and py_version. It can be an ECR url or dockerhub image and tag.
Examples:
123.dkr.ecr.us-west-2.amazonaws.com/my-custom-image:1.0
custom-image:latest.
If ``framework_version`` or ``py_version`` are ``None``, then
``image_uri`` is required. If also ``None``, then a ``ValueError``
will be raised.}

\item{\code{distribution}}{(dict): A dictionary with information on how to run distributed training
(default: None). Currently, the following are supported:
distributed training with parameter servers, SageMaker Distributed (SMD) Data
and Model Parallelism, and MPI. SMD Model Parallelism can only be used with MPI.
To enable parameter server use the following setup:
.. code:: python
{
"parameter_server": {
"enabled": True
}
}
To enable MPI:
.. code:: python
{
"mpi": {
"enabled": True
}
}
To enable SMDistributed Data Parallel or Model Parallel:
.. code:: python
{
"smdistributed": {
"dataparallel": {
"enabled": True
},
"modelparallel": {
"enabled": True,
"parameters": {}
}
}
}}

\item{\code{...}}{: Additional kwargs passed to the Framework constructor.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_model"></a>}}
\if{latex}{\out{\hypertarget{method-create_model}{}}}
\subsection{Method \code{create_model()}}{
Create a ``TensorFlowModel`` object that can be used for creating
             SageMaker model entities, deploying to a SageMaker endpoint, or
             starting SageMaker Batch Transform jobs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlow$create_model(
  role = NULL,
  vpc_config_override = "VPC_CONFIG_DEFAULT",
  entry_point = NULL,
  source_dir = NULL,
  dependencies = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{(str): The ``TensorFlowModel``, which is also used during transform jobs.
If not specified, the role from the Estimator is used.}

\item{\code{vpc_config_override}}{(dict[str, list[str]]): Optional override for VpcConfig set on the
model. Default: use subnets and security groups from this Estimator.
* 'Subnets' (list[str]): List of subnet ids.
* 'SecurityGroupIds' (list[str]): List of security group ids.}

\item{\code{entry_point}}{(str): Path (absolute or relative) to the local Python source file which
should be executed as the entry point to training. If ``source_dir`` is specified,
then ``entry_point`` must point to a file located at the root of ``source_dir``.
If not specified and ``endpoint_type`` is 'tensorflow-serving',
no entry point is used. If ``endpoint_type`` is also ``None``,
then the training entry point is used.}

\item{\code{source_dir}}{(str): Path (absolute or relative or an S3 URI) to a directory with any other
serving source code dependencies aside from the entry point file (default: None).}

\item{\code{dependencies}}{(list[str]): A list of paths to directories (absolute or relative) with
any additional libraries that will be exported to the container (default: None).}

\item{\code{...}}{: Additional kwargs passed to
:class:`~sagemaker.tensorflow.model.TensorFlowModel`.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
sagemaker.tensorflow.model.TensorFlowModel: A ``TensorFlowModel`` object.
             See :class:`~sagemaker.tensorflow.model.TensorFlowModel` for full details.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-hyperparameters"></a>}}
\if{latex}{\out{\hypertarget{method-hyperparameters}{}}}
\subsection{Method \code{hyperparameters()}}{
Return hyperparameters used by your custom TensorFlow code during model training.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlow$hyperparameters()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformer"></a>}}
\if{latex}{\out{\hypertarget{method-transformer}{}}}
\subsection{Method \code{transformer()}}{
Return a ``Transformer`` that uses a SageMaker Model based on the training job. It
             reuses the SageMaker Session and base job name used by the Estimator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlow$transformer(
  instance_count,
  instance_type,
  strategy = NULL,
  assemble_with = NULL,
  output_path = NULL,
  output_kms_key = NULL,
  accept = NULL,
  env = NULL,
  max_concurrent_transforms = NULL,
  max_payload = NULL,
  tags = NULL,
  role = NULL,
  volume_kms_key = NULL,
  entry_point = NULL,
  vpc_config_override = "VPC_CONFIG_DEFAULT",
  enable_network_isolation = NULL,
  model_name = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{instance_count}}{(int): Number of EC2 instances to use.}

\item{\code{instance_type}}{(str): Type of EC2 instance to use, for example, 'ml.c4.xlarge'.}

\item{\code{strategy}}{(str): The strategy used to decide how to batch records in a single request
(default: None). Valid values: 'MultiRecord' and 'SingleRecord'.}

\item{\code{assemble_with}}{(str): How the output is assembled (default: None). Valid values: 'Line'
or 'None'.}

\item{\code{output_path}}{(str): S3 location for saving the transform result. If not specified,
results are stored to a default bucket.}

\item{\code{output_kms_key}}{(str): Optional. KMS key ID for encrypting the transform output
(default: None).}

\item{\code{accept}}{(str): The accept header passed by the client to
the inference endpoint. If it is supported by the endpoint,
it will be the format of the batch transform output.}

\item{\code{env}}{(dict): Environment variables to be set for use during the transform job
(default: None).}

\item{\code{max_concurrent_transforms}}{(int): The maximum number of HTTP requests to be made to
each individual transform container at one time.}

\item{\code{max_payload}}{(int): Maximum size of the payload in a single HTTP request to the
container in MB.}

\item{\code{tags}}{(list[dict]): List of tags for labeling a transform job. If none specified, then
the tags used for the training job are used for the transform job.}

\item{\code{role}}{(str): The IAM Role ARN for the ``TensorFlowModel``, which is also used
during transform jobs. If not specified, the role from the Estimator is used.}

\item{\code{volume_kms_key}}{(str): Optional. KMS key ID for encrypting the volume attached to the ML
compute instance (default: None).}

\item{\code{entry_point}}{(str): Path (absolute or relative) to the local Python source file which
should be executed as the entry point to training. If ``source_dir`` is specified,
then ``entry_point`` must point to a file located at the root of ``source_dir``.
If not specified and ``endpoint_type`` is 'tensorflow-serving',
no entry point is used. If ``endpoint_type`` is also ``None``,
then the training entry point is used.}

\item{\code{vpc_config_override}}{(dict[str, list[str]]): Optional override for
the VpcConfig set on the model.
Default: use subnets and security groups from this Estimator.
* 'Subnets' (list[str]): List of subnet ids.
* 'SecurityGroupIds' (list[str]): List of security group ids.}

\item{\code{enable_network_isolation}}{(bool): Specifies whether container will
run in network isolation mode. Network isolation mode restricts
the container access to outside networks (such as the internet).
The container does not make any inbound or outbound network
calls. If True, a channel named "code" will be created for any
user entry script for inference. Also known as Internet-free mode.
If not specified, this setting is taken from the estimator's
current configuration.}

\item{\code{model_name}}{(str): Name to use for creating an Amazon SageMaker
model. If not specified, the estimator generates a default job name
based on the training image name and current timestamp.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlow$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
