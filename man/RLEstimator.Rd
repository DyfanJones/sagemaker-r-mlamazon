% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rl_estimator.R
\name{RLEstimator}
\alias{RLEstimator}
\title{RLEstimator Class}
\description{
Handle end-to-end training and deployment of custom RLEstimator code.
}
\section{Super classes}{
\code{\link[R6sagemaker.common:EstimatorBase]{R6sagemaker.common::EstimatorBase}} -> \code{\link[R6sagemaker.common:Framework]{R6sagemaker.common::Framework}} -> \code{RLEstimator}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{COACH_LATEST_VERSION_TF}}{latest version of toolkit coach for tensorflow}

\item{\code{COACH_LATEST_VERSION_MXNET}}{latest version of toolkit coach for mxnet}

\item{\code{RAY_LATEST_VERSION}}{latest version of toolkit ray}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RLEstimator$new()}}
\item \href{#method-create_model}{\code{RLEstimator$create_model()}}
\item \href{#method-training_image_uri}{\code{RLEstimator$training_image_uri()}}
\item \href{#method-hyperparameters}{\code{RLEstimator$hyperparameters()}}
\item \href{#method-default_metric_definitions}{\code{RLEstimator$default_metric_definitions()}}
\item \href{#method-clone}{\code{RLEstimator$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="compile_model">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-compile_model}{\code{R6sagemaker.common::EstimatorBase$compile_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="delete_endpoint">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-delete_endpoint}{\code{R6sagemaker.common::EstimatorBase$delete_endpoint()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="deploy">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-deploy}{\code{R6sagemaker.common::EstimatorBase$deploy()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="disable_profiling">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-disable_profiling}{\code{R6sagemaker.common::EstimatorBase$disable_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="enable_default_profiling">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-enable_default_profiling}{\code{R6sagemaker.common::EstimatorBase$enable_default_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="enable_network_isolation">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-enable_network_isolation}{\code{R6sagemaker.common::EstimatorBase$enable_network_isolation()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="fit">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-fit}{\code{R6sagemaker.common::EstimatorBase$fit()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="format">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-format}{\code{R6sagemaker.common::EstimatorBase$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="get_vpc_config">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-get_vpc_config}{\code{R6sagemaker.common::EstimatorBase$get_vpc_config()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_debugger_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_debugger_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_debugger_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_profiler_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_profiler_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_profiler_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_tensorboard_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_tensorboard_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_tensorboard_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="logs">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-logs}{\code{R6sagemaker.common::EstimatorBase$logs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="prepare_workflow_for_training">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-prepare_workflow_for_training}{\code{R6sagemaker.common::EstimatorBase$prepare_workflow_for_training()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="register">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-register}{\code{R6sagemaker.common::EstimatorBase$register()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="update_profiler">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-update_profiler}{\code{R6sagemaker.common::EstimatorBase$update_profiler()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="wait">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-wait}{\code{R6sagemaker.common::EstimatorBase$wait()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id=".prepare_for_training">}\href{../../R6sagemaker.common/html/Framework.html#method-.prepare_for_training}{\code{R6sagemaker.common::Framework$.prepare_for_training()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id="attach">}\href{../../R6sagemaker.common/html/Framework.html#method-attach}{\code{R6sagemaker.common::Framework$attach()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id="transformer">}\href{../../R6sagemaker.common/html/Framework.html#method-transformer}{\code{R6sagemaker.common::Framework$transformer()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates an RLEstimator for managed Reinforcement Learning (RL).
             It will execute an RLEstimator script within a SageMaker Training Job. The managed RL
             environment is an Amazon-built Docker container that executes functions defined in the
             supplied ``entry_point`` Python script.
             Training is started by calling
             :meth:`~sagemaker.amazon.estimator.Framework.fit` on this Estimator.
             After training is complete, calling
             :meth:`~sagemaker.amazon.estimator.Framework.deploy` creates a hosted
             SageMaker endpoint and based on the specified framework returns an
             :class:`~sagemaker.amazon.mxnet.model.MXNetPredictor` or
             :class:`~sagemaker.amazon.tensorflow.model.TensorFlowPredictor` instance that
             can be used to perform inference against the hosted model.
             Technical documentation on preparing RLEstimator scripts for
             SageMaker training and using the RLEstimator is available on the project
             homepage: https://github.com/aws/sagemaker-python-sdk
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RLEstimator$new(
  entry_point,
  toolkit = NULL,
  toolkit_version = NULL,
  framework = NULL,
  source_dir = NULL,
  hyperparameters = NULL,
  image_uri = NULL,
  metric_definitions = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entry_point}}{(str): Path (absolute or relative) to the Python source
file which should be executed as the entry point to training.
If ``source_dir`` is specified, then ``entry_point``
must point to a file located at the root of ``source_dir``.}

\item{\code{toolkit}}{(sagemaker.rl.RLToolkit): RL toolkit you want to use for
executing your model training code.}

\item{\code{toolkit_version}}{(str): RL toolkit version you want to be use for
executing your model training code.}

\item{\code{framework}}{(sagemaker.rl.RLFramework): Framework (MXNet or
TensorFlow) you want to be used as a toolkit backed for
reinforcement learning training.}

\item{\code{source_dir}}{(str): Path (absolute, relative or an S3 URI) to a directory
with any other training source code dependencies aside from the entry
point file (default: NULL). If ``source_dir`` is an S3 URI, it must
point to a tar.gz file. Structure within this directory are preserved
when training on Amazon SageMaker.}

\item{\code{hyperparameters}}{(dict): Hyperparameters that will be used for
training (default: NULL). The hyperparameters are made
accessible as a dict[str, str] to the training code on
SageMaker. For convenience, this accepts other types for keys
and values.}

\item{\code{image_uri}}{(str): An ECR url. If specified, the estimator will use
this image for training and hosting, instead of selecting the
appropriate SageMaker official image based on framework_version
and py_version. Example:
123.dkr.ecr.us-west-2.amazonaws.com/my-custom-image:1.0}

\item{\code{metric_definitions}}{(list[dict]): A list of dictionaries that defines
the metric(s) used to evaluate the training jobs. Each
dictionary contains two keys: 'Name' for the name of the metric,
and 'Regex' for the regular expression used to extract the
metric from the logs. This should be defined only for jobs that
don't use an Amazon algorithm.}

\item{\code{...}}{: Additional kwargs passed to the
:class:`~sagemaker.estimator.Framework` constructor.
.. tip::
You can find additional parameters for initializing this class at
:class:`~sagemaker.estimator.Framework` and
:class:`~sagemaker.estimator.EstimatorBase`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_model"></a>}}
\if{latex}{\out{\hypertarget{method-create_model}{}}}
\subsection{Method \code{create_model()}}{
Create a SageMaker ``RLEstimatorModel`` object that can be deployed to an Endpoint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RLEstimator$create_model(
  role = NULL,
  vpc_config_override = "VPC_CONFIG_DEFAULT",
  entry_point = NULL,
  source_dir = NULL,
  dependencies = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{(str): The ``ExecutionRoleArn`` IAM Role ARN for the ``Model``,
which is also used during transform jobs. If not specified, the
role from the Estimator will be used.}

\item{\code{vpc_config_override}}{(dict[str, list[str]]): Optional override for VpcConfig set on
the model. Default: use subnets and security groups from this Estimator.
* 'Subnets' (list[str]): List of subnet ids.
* 'SecurityGroupIds' (list[str]): List of security group ids.}

\item{\code{entry_point}}{(str): Path (absolute or relative) to the Python source
file which should be executed as the entry point for MXNet
hosting (default: self.entry_point). If ``source_dir`` is specified,
then ``entry_point`` must point to a file located at the root of ``source_dir``.}

\item{\code{source_dir}}{(str): Path (absolute or relative) to a directory with
any other training source code dependencies aside from the entry
point file (default: self.source_dir). Structure within this
directory are preserved when hosting on Amazon SageMaker.}

\item{\code{dependencies}}{(list[str]): A list of paths to directories (absolute
or relative) with any additional libraries that will be exported
to the container (default: self.dependencies). The library
folders will be copied to SageMaker in the same folder where the
entry_point is copied. If the ```source_dir``` points to S3,
code will be uploaded and the S3 location will be used instead.
This is not supported with "local code" in Local Mode.}

\item{\code{...}}{: Additional kwargs passed to the :class:`~sagemaker.model.FrameworkModel`
constructor.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
sagemaker.model.FrameworkModel: Depending on input parameters returns
             one of the following:
             * :class:`~sagemaker.model.FrameworkModel` - if ``image_uri`` is specified
             on the estimator;
             * :class:`~sagemaker.mxnet.MXNetModel` - if ``image_uri`` isn't specified and
                                 MXNet is used as the RL backend;
             * :class:`~sagemaker.tensorflow.model.TensorFlowModel` - if ``image_uri`` isn't
             specified and TensorFlow is used as the RL backend.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-training_image_uri"></a>}}
\if{latex}{\out{\hypertarget{method-training_image_uri}{}}}
\subsection{Method \code{training_image_uri()}}{
Return the Docker image to use for training.
             The :meth:`~sagemaker.estimator.EstimatorBase.fit` method, which does
             the model training, calls this method to find the image to use for model
             training.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RLEstimator$training_image_uri()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
str: The URI of the Docker image.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-hyperparameters"></a>}}
\if{latex}{\out{\hypertarget{method-hyperparameters}{}}}
\subsection{Method \code{hyperparameters()}}{
Return hyperparameters used by your custom TensorFlow code during model training.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RLEstimator$hyperparameters()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-default_metric_definitions"></a>}}
\if{latex}{\out{\hypertarget{method-default_metric_definitions}{}}}
\subsection{Method \code{default_metric_definitions()}}{
Provides default metric definitions based on provided toolkit.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RLEstimator$default_metric_definitions(toolkit)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{toolkit}}{(sagemaker.rl.RLToolkit): RL Toolkit to be used for
training.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
list: metric definitions
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RLEstimator$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
