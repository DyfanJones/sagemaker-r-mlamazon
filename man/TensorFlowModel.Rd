% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tensorflow_model.R
\name{TensorFlowModel}
\alias{TensorFlowModel}
\title{TensorFlowModel Class}
\description{
A ``FrameworkModel`` implementation for inference with TensorFlow Serving.
}
\section{Super classes}{
\code{\link[R6sagemaker.common:Model]{R6sagemaker.common::Model}} -> \code{\link[R6sagemaker.common:FrameworkModel]{R6sagemaker.common::FrameworkModel}} -> \code{TensorFlowModel}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{LOG_LEVEL_PARAM_NAME}}{logging level}

\item{\code{LATEST_EIA_VERSION}}{latest eia version supported}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TensorFlowModel$new()}}
\item \href{#method-register}{\code{TensorFlowModel$register()}}
\item \href{#method-clone}{\code{TensorFlowModel$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id=".create_sagemaker_model">}\href{../../R6sagemaker.common/html/Model.html#method-.create_sagemaker_model}{\code{R6sagemaker.common::Model$.create_sagemaker_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="check_neo_region">}\href{../../R6sagemaker.common/html/Model.html#method-check_neo_region}{\code{R6sagemaker.common::Model$check_neo_region()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="compile">}\href{../../R6sagemaker.common/html/Model.html#method-compile}{\code{R6sagemaker.common::Model$compile()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="delete_model">}\href{../../R6sagemaker.common/html/Model.html#method-delete_model}{\code{R6sagemaker.common::Model$delete_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="deploy">}\href{../../R6sagemaker.common/html/Model.html#method-deploy}{\code{R6sagemaker.common::Model$deploy()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="enable_network_isolation">}\href{../../R6sagemaker.common/html/Model.html#method-enable_network_isolation}{\code{R6sagemaker.common::Model$enable_network_isolation()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="format">}\href{../../R6sagemaker.common/html/Model.html#method-format}{\code{R6sagemaker.common::Model$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="package_for_edge">}\href{../../R6sagemaker.common/html/Model.html#method-package_for_edge}{\code{R6sagemaker.common::Model$package_for_edge()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="transformer">}\href{../../R6sagemaker.common/html/Model.html#method-transformer}{\code{R6sagemaker.common::Model$transformer()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="FrameworkModel" data-id="prepare_container_def">}\href{../../R6sagemaker.common/html/FrameworkModel.html#method-prepare_container_def}{\code{R6sagemaker.common::FrameworkModel$prepare_container_def()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a Model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlowModel$new(
  model_data,
  role,
  entry_point = NULL,
  image_uri = NULL,
  framework_version = NULL,
  container_log_level = NULL,
  predictor_cls = TensorFlowPredictor,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model_data}}{(str): The S3 location of a SageMaker model data
``.tar.gz`` file.}

\item{\code{role}}{(str): An AWS IAM role (either name or full ARN). The Amazon
SageMaker training jobs and APIs that create Amazon SageMaker
endpoints use this role to access training data and model
artifacts. After the endpoint is created, the inference code
might use the IAM role, if it needs to access an AWS resource.}

\item{\code{entry_point}}{(str): Path (absolute or relative) to the Python source
file which should be executed as the entry point to model
hosting. If ``source_dir`` is specified, then ``entry_point``
must point to a file located at the root of ``source_dir``.}

\item{\code{image_uri}}{(str): A Docker image URI (default: None). If not specified, a
default image for TensorFlow Serving will be used. If
``framework_version`` is ``None``, then ``image_uri`` is required.
If also ``None``, then a ``ValueError`` will be raised.}

\item{\code{framework_version}}{(str): Optional. TensorFlow Serving version you
want to use. Defaults to ``None``. Required unless ``image_uri`` is
provided.}

\item{\code{container_log_level}}{(int): Log level to use within the container
(default: logging.ERROR). Valid values are defined in the Python
logging module.}

\item{\code{predictor_cls}}{(callable[str, sagemaker.session.Session]): A function
to call to create a predictor with an endpoint name and
SageMaker ``Session``. If specified, ``deploy()`` returns the
result of invoking this function on the created endpoint name.}

\item{\code{...}}{: Keyword arguments passed to the superclass
:class:`~sagemaker.model.FrameworkModel` and, subsequently, its
superclass :class:`~sagemaker.model.Model`.
.. tip::
You can find additional parameters for initializing this class at
:class:`~sagemaker.model.FrameworkModel` and
:class:`~sagemaker.model.Model`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-register"></a>}}
\if{latex}{\out{\hypertarget{method-register}{}}}
\subsection{Method \code{register()}}{
Creates a model package for creating SageMaker models or listing on Marketplace.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlowModel$register(
  content_types,
  response_types,
  inference_instances,
  transform_instances,
  model_package_name = NULL,
  model_package_group_name = NULL,
  image_uri = NULL,
  model_metrics = NULL,
  metadata_properties = NULL,
  marketplace_cert = FALSE,
  approval_status = NULL,
  description = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{content_types}}{(list): The supported MIME types for the input data.}

\item{\code{response_types}}{(list): The supported MIME types for the output data.}

\item{\code{inference_instances}}{(list): A list of the instance types that are used to
generate inferences in real-time.}

\item{\code{transform_instances}}{(list): A list of the instance types on which a transformation
job can be run or on which an endpoint can be deployed.}

\item{\code{model_package_name}}{(str): Model Package name, exclusive to `model_package_group_name`,
using `model_package_name` makes the Model Package un-versioned (default: None).}

\item{\code{model_package_group_name}}{(str): Model Package Group name, exclusive to
`model_package_name`, using `model_package_group_name` makes the Model Package
versioned (default: None).}

\item{\code{image_uri}}{(str): Inference image uri for the container. Model class' self.image will
be used if it is None (default: None).}

\item{\code{model_metrics}}{(ModelMetrics): ModelMetrics object (default: None).}

\item{\code{metadata_properties}}{(MetadataProperties): MetadataProperties object (default: None).}

\item{\code{marketplace_cert}}{(bool): A boolean value indicating if the Model Package is certified
for AWS Marketplace (default: False).}

\item{\code{approval_status}}{(str): Model Approval Status, values can be "Approved", "Rejected",
or "PendingManualApproval" (default: "PendingManualApproval").}

\item{\code{description}}{(str): Model Package description (default: None).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
str: A string of SageMaker Model Package ARN.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlowModel$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
