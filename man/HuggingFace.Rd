% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/huggingface_estimator.R
\name{HuggingFace}
\alias{HuggingFace}
\title{HuggingFace estimator class}
\description{
Handle training of custom HuggingFace code.
}
\section{Super classes}{
\code{\link[R6sagemaker.common:EstimatorBase]{R6sagemaker.common::EstimatorBase}} -> \code{\link[R6sagemaker.common:Framework]{R6sagemaker.common::Framework}} -> \code{HuggingFace}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{HuggingFace$new()}}
\item \href{#method-hyperparameters}{\code{HuggingFace$hyperparameters()}}
\item \href{#method-create_model}{\code{HuggingFace$create_model()}}
\item \href{#method-clone}{\code{HuggingFace$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="compile_model">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-compile_model}{\code{R6sagemaker.common::EstimatorBase$compile_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="delete_endpoint">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-delete_endpoint}{\code{R6sagemaker.common::EstimatorBase$delete_endpoint()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="deploy">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-deploy}{\code{R6sagemaker.common::EstimatorBase$deploy()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="disable_profiling">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-disable_profiling}{\code{R6sagemaker.common::EstimatorBase$disable_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="enable_default_profiling">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-enable_default_profiling}{\code{R6sagemaker.common::EstimatorBase$enable_default_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="enable_network_isolation">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-enable_network_isolation}{\code{R6sagemaker.common::EstimatorBase$enable_network_isolation()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="fit">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-fit}{\code{R6sagemaker.common::EstimatorBase$fit()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="format">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-format}{\code{R6sagemaker.common::EstimatorBase$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="get_vpc_config">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-get_vpc_config}{\code{R6sagemaker.common::EstimatorBase$get_vpc_config()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_debugger_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_debugger_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_debugger_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_profiler_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_profiler_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_profiler_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_tensorboard_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_tensorboard_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_tensorboard_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="logs">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-logs}{\code{R6sagemaker.common::EstimatorBase$logs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="prepare_workflow_for_training">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-prepare_workflow_for_training}{\code{R6sagemaker.common::EstimatorBase$prepare_workflow_for_training()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="register">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-register}{\code{R6sagemaker.common::EstimatorBase$register()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="update_profiler">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-update_profiler}{\code{R6sagemaker.common::EstimatorBase$update_profiler()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="wait">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-wait}{\code{R6sagemaker.common::EstimatorBase$wait()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id=".prepare_for_training">}\href{../../R6sagemaker.common/html/Framework.html#method-.prepare_for_training}{\code{R6sagemaker.common::Framework$.prepare_for_training()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id="attach">}\href{../../R6sagemaker.common/html/Framework.html#method-attach}{\code{R6sagemaker.common::Framework$attach()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id="training_image_uri">}\href{../../R6sagemaker.common/html/Framework.html#method-training_image_uri}{\code{R6sagemaker.common::Framework$training_image_uri()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Framework" data-id="transformer">}\href{../../R6sagemaker.common/html/Framework.html#method-transformer}{\code{R6sagemaker.common::Framework$transformer()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
This ``Estimator`` executes a HuggingFace script in a managed execution environment.
             The managed HuggingFace environment is an Amazon-built Docker container that executes
             functions defined in the supplied ``entry_point`` Python script within a SageMaker
             Training Job.
             Training is started by calling
             :meth:`~sagemaker.amazon.estimator.Framework.fit` on this Estimator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HuggingFace$new(
  py_version,
  entry_point,
  transformers_version = NULL,
  tensorflow_version = NULL,
  pytorch_version = NULL,
  source_dir = NULL,
  hyperparameters = NULL,
  image_uri = NULL,
  distribution = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{py_version}}{(str): Python version you want to use for executing your model training
code. Defaults to ``None``. Required unless ``image_uri`` is provided.  List
of supported versions:
https://github.com/aws/sagemaker-python-sdk#huggingface-sagemaker-estimators}

\item{\code{entry_point}}{(str): Path (absolute or relative) to the Python source
file which should be executed as the entry point to training.
If ``source_dir`` is specified, then ``entry_point``
must point to a file located at the root of ``source_dir``.}

\item{\code{transformers_version}}{(str): Transformers version you want to use for
executing your model training code. Defaults to ``None``. Required unless
``image_uri`` is provided. List of supported versions:
https://github.com/aws/sagemaker-python-sdk#huggingface-sagemaker-estimators.}

\item{\code{tensorflow_version}}{(str): TensorFlow version you want to use for
executing your model training code. Defaults to ``None``. Required unless
``pytorch_version`` is provided. List of supported versions:
https://github.com/aws/sagemaker-python-sdk#huggingface-sagemaker-estimators.}

\item{\code{pytorch_version}}{(str): PyTorch version you want to use for
executing your model training code. Defaults to ``None``. Required unless
``tensorflow_version`` is provided. List of supported versions:
https://github.com/aws/sagemaker-python-sdk#huggingface-sagemaker-estimators.}

\item{\code{source_dir}}{(str): Path (absolute, relative or an S3 URI) to a directory
with any other training source code dependencies aside from the entry
point file (default: None). If ``source_dir`` is an S3 URI, it must
point to a tar.gz file. Structure within this directory are preserved
when training on Amazon SageMaker.}

\item{\code{hyperparameters}}{(dict): Hyperparameters that will be used for
training (default: None). The hyperparameters are made
accessible as a dict[str, str] to the training code on
SageMaker. For convenience, this accepts other types for keys
and values, but ``str()`` will be called to convert them before
training.}

\item{\code{image_uri}}{(str): If specified, the estimator will use this image
for training and hosting, instead of selecting the appropriate
SageMaker official image based on framework_version and
py_version. It can be an ECR url or dockerhub image and tag.
Examples:
* ``123412341234.dkr.ecr.us-west-2.amazonaws.com/my-custom-image:1.0``
* ``custom-image:latest``
If ``framework_version`` or ``py_version`` are ``None``, then
``image_uri`` is required. If also ``None``, then a ``ValueError``
will be raised.}

\item{\code{distribution}}{(dict): A dictionary with information on how to run distributed training
(default: None).  Currently, the following are supported:
distributed training with parameter servers, SageMaker Distributed (SMD) Data
and Model Parallelism, and MPI. SMD Model Parallelism can only be used with MPI.
To enable parameter server use the following setup:
.. code:: python
{
"parameter_server": {
"enabled": True
}
}
To enable MPI:
.. code:: python
{
"mpi": {
"enabled": True
}
}
To enable SMDistributed Data Parallel or Model Parallel:
.. code:: python
{
"smdistributed": {
"dataparallel": {
"enabled": True
},
"modelparallel": {
"enabled": True,
"parameters": {}
}
}
}}

\item{\code{...}}{: Additional kwargs passed to the :class:`~sagemaker.estimator.Framework`
constructor.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-hyperparameters"></a>}}
\if{latex}{\out{\hypertarget{method-hyperparameters}{}}}
\subsection{Method \code{hyperparameters()}}{
Return hyperparameters used by your custom PyTorch code during model training.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HuggingFace$hyperparameters()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_model"></a>}}
\if{latex}{\out{\hypertarget{method-create_model}{}}}
\subsection{Method \code{create_model()}}{
Create a model to deploy.
             The serializer, deserializer, content_type, and accept arguments are only used to define a
             default Predictor. They are ignored if an explicit predictor class is passed in.
             Other arguments are passed through to the Model class.
             Creating model with HuggingFace training job is not supported.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HuggingFace$create_model(
  model_server_workers = NULL,
  role = NULL,
  vpc_config_override = "VPC_CONFIG_DEFAULT",
  entry_point = NULL,
  source_dir = NULL,
  dependencies = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model_server_workers}}{(int): Optional. The number of worker processes
used by the inference server. If None, server will use one
worker per vCPU.}

\item{\code{role}}{(str): The ``ExecutionRoleArn`` IAM Role ARN for the ``Model``,
which is also used during transform jobs. If not specified, the
role from the Estimator will be used.}

\item{\code{vpc_config_override}}{(dict[str, list[str]]): Optional override for VpcConfig set on
the model.
Default: use subnets and security groups from this Estimator.
* 'Subnets' (list[str]): List of subnet ids.
* 'SecurityGroupIds' (list[str]): List of security group ids.}

\item{\code{entry_point}}{(str): Path (absolute or relative) to the local Python
source file which should be executed as the entry point to
training. If ``source_dir`` is specified, then ``entry_point``
must point to a file located at the root of ``source_dir``.
If 'git_config' is provided, 'entry_point' should be
a relative location to the Python source file in the Git repo.}

\item{\code{source_dir}}{(str): Path (absolute, relative or an S3 URI) to a directory
with any other training source code dependencies aside from the entry
point file (default: None). If ``source_dir`` is an S3 URI, it must
point to a tar.gz file. Structure within this directory are preserved
when training on Amazon SageMaker. If 'git_config' is provided,
'source_dir' should be a relative location to a directory in the Git
repo.}

\item{\code{dependencies}}{(list[str]): A list of paths to directories (absolute
or relative) with any additional libraries that will be exported
to the container (default: []). The library folders will be
copied to SageMaker in the same folder where the entrypoint is
copied. If 'git_config' is provided, 'dependencies' should be a
list of relative locations to directories with any additional
libraries needed in the Git repo.}

\item{\code{...}}{: Additional parameters passed to :class:`~sagemaker.model.Model`
.. tip::
You can find additional parameters for using this method at
:class:`~sagemaker.model.Model`.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(sagemaker.model.Model) a Model ready for deployment.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HuggingFace$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
