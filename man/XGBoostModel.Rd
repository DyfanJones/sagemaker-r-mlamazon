% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xgboost_model.R
\name{XGBoostModel}
\alias{XGBoostModel}
\title{XGBoostModel Class}
\description{
An XGBoost SageMaker ``Model`` that can be deployed to a SageMaker ``Endpoint``.
}
\section{Super classes}{
\code{\link[R6sagemaker.common:Model]{R6sagemaker.common::Model}} -> \code{\link[R6sagemaker.common:FrameworkModel]{R6sagemaker.common::FrameworkModel}} -> \code{XGBoostModel}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{XGBoostModel$new()}}
\item \href{#method-prepare_container_def}{\code{XGBoostModel$prepare_container_def()}}
\item \href{#method-serving_image_uri}{\code{XGBoostModel$serving_image_uri()}}
\item \href{#method-clone}{\code{XGBoostModel$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id=".create_sagemaker_model">}\href{../../R6sagemaker.common/html/Model.html#method-.create_sagemaker_model}{\code{R6sagemaker.common::Model$.create_sagemaker_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="check_neo_region">}\href{../../R6sagemaker.common/html/Model.html#method-check_neo_region}{\code{R6sagemaker.common::Model$check_neo_region()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="compile">}\href{../../R6sagemaker.common/html/Model.html#method-compile}{\code{R6sagemaker.common::Model$compile()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="delete_model">}\href{../../R6sagemaker.common/html/Model.html#method-delete_model}{\code{R6sagemaker.common::Model$delete_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="deploy">}\href{../../R6sagemaker.common/html/Model.html#method-deploy}{\code{R6sagemaker.common::Model$deploy()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="enable_network_isolation">}\href{../../R6sagemaker.common/html/Model.html#method-enable_network_isolation}{\code{R6sagemaker.common::Model$enable_network_isolation()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="format">}\href{../../R6sagemaker.common/html/Model.html#method-format}{\code{R6sagemaker.common::Model$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="package_for_edge">}\href{../../R6sagemaker.common/html/Model.html#method-package_for_edge}{\code{R6sagemaker.common::Model$package_for_edge()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="register">}\href{../../R6sagemaker.common/html/Model.html#method-register}{\code{R6sagemaker.common::Model$register()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="Model" data-id="transformer">}\href{../../R6sagemaker.common/html/Model.html#method-transformer}{\code{R6sagemaker.common::Model$transformer()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize an XGBoostModel.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{XGBoostModel$new(
  model_data,
  role,
  entry_point,
  framework_version,
  image_uri = NULL,
  py_version = "py3",
  predictor_cls = XGBoostPredictor,
  model_server_workers = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model_data}}{(str): The S3 location of a SageMaker model data ``.tar.gz`` file.}

\item{\code{role}}{(str): An AWS IAM role (either name or full ARN). The Amazon SageMaker training
jobs and APIs that create Amazon SageMaker endpoints use this role to access
training data and model artifacts. After the endpoint is created, the inference
code might use the IAM role, if it needs to access an AWS resource.}

\item{\code{entry_point}}{(str): Path (absolute or relative) to the Python source file which should
be executed  as the entry point to model hosting. If ``source_dir`` is specified,
then ``entry_point`` must point to a file located at the root of ``source_dir``.}

\item{\code{framework_version}}{(str): XGBoost version you want to use for executing your model
training code.}

\item{\code{image_uri}}{(str): A Docker image URI (default: None). If not specified, a default image
for XGBoost is be used.}

\item{\code{py_version}}{(str): Python version you want to use for executing your model training code
(default: 'py3').}

\item{\code{predictor_cls}}{(callable[str, sagemaker.session.Session]): A function to call to create
a predictor with an endpoint name and SageMaker ``Session``.
If specified, ``deploy()`` returns the result of invoking this function on the
created endpoint name.}

\item{\code{model_server_workers}}{(int): Optional. The number of worker processes used by the
inference server. If None, server will use one worker per vCPU.}

\item{\code{...}}{: Keyword arguments passed to the ``FrameworkModel`` initializer.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prepare_container_def"></a>}}
\if{latex}{\out{\hypertarget{method-prepare_container_def}{}}}
\subsection{Method \code{prepare_container_def()}}{
Return a container definition with framework configuration
             set in model environment variables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{XGBoostModel$prepare_container_def(
  instance_type = NULL,
  accelerator_type = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{instance_type}}{(str): The EC2 instance type to deploy this Model to.
This parameter is unused because XGBoost supports only CPU.}

\item{\code{accelerator_type}}{(str): The Elastic Inference accelerator type to deploy to the
instance for loading and making inferences to the model. This parameter is
unused because accelerator types are not supported by XGBoostModel.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict[str, str]: A container definition object usable with the CreateModel API.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-serving_image_uri"></a>}}
\if{latex}{\out{\hypertarget{method-serving_image_uri}{}}}
\subsection{Method \code{serving_image_uri()}}{
Create a URI for the serving image.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{XGBoostModel$serving_image_uri(region_name, instance_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{region_name}}{(str): AWS region where the image is uploaded.}

\item{\code{instance_type}}{(str): SageMaker instance type. Must be a CPU instance type.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
str: The appropriate image URI based on the given parameters.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{XGBoostModel$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
