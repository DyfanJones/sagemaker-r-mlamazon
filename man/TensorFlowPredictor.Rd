% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tensorflow_model.R
\name{TensorFlowPredictor}
\alias{TensorFlowPredictor}
\title{TensorFlowPredictor Class}
\description{
A ``Predictor`` implementation for inference against TensorFlow
             Serving endpoints.
}
\section{Super class}{
\code{\link[R6sagemaker.mlcore:Predictor]{R6sagemaker.mlcore::Predictor}} -> \code{TensorFlowPredictor}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TensorFlowPredictor$new()}}
\item \href{#method-classify}{\code{TensorFlowPredictor$classify()}}
\item \href{#method-regress}{\code{TensorFlowPredictor$regress()}}
\item \href{#method-predict}{\code{TensorFlowPredictor$predict()}}
\item \href{#method-clone}{\code{TensorFlowPredictor$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="delete_endpoint">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-delete_endpoint}{\code{R6sagemaker.mlcore::Predictor$delete_endpoint()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="delete_model">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-delete_model}{\code{R6sagemaker.mlcore::Predictor$delete_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="disable_data_capture">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-disable_data_capture}{\code{R6sagemaker.mlcore::Predictor$disable_data_capture()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="enable_data_capture">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-enable_data_capture}{\code{R6sagemaker.mlcore::Predictor$enable_data_capture()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="endpoint_context">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-endpoint_context}{\code{R6sagemaker.mlcore::Predictor$endpoint_context()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="format">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-format}{\code{R6sagemaker.mlcore::Predictor$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="list_monitors">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-list_monitors}{\code{R6sagemaker.mlcore::Predictor$list_monitors()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="update_data_capture_config">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-update_data_capture_config}{\code{R6sagemaker.mlcore::Predictor$update_data_capture_config()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="update_endpoint">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-update_endpoint}{\code{R6sagemaker.mlcore::Predictor$update_endpoint()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a ``TensorFlowPredictor``.
             See :class:`~sagemaker.predictor.Predictor` for more info about parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlowPredictor$new(
  endpoint_name,
  sagemaker_session = NULL,
  serializer = JSONSerializer$new(),
  deserializer = JSONDeserializer$new(),
  model_name = NULL,
  model_version = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{endpoint_name}}{(str): The name of the endpoint to perform inference
on.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): Session object which
manages interactions with Amazon SageMaker APIs and any other
AWS services needed. If not specified, the estimator creates one
using the default AWS configuration chain.}

\item{\code{serializer}}{(callable): Optional. Default serializes input data to
json. Handles dicts, lists, and numpy arrays.}

\item{\code{deserializer}}{(callable): Optional. Default parses the response using
``json.load(...)``.}

\item{\code{model_name}}{(str): Optional. The name of the SavedModel model that
should handle the request. If not specified, the endpoint's
default model will handle the request.}

\item{\code{model_version}}{(str): Optional. The version of the SavedModel model
that should handle the request. If not specified, the latest
version of the model will be used.}

\item{\code{...}}{: Additional parameters passed to the Predictor constructor.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-classify"></a>}}
\if{latex}{\out{\hypertarget{method-classify}{}}}
\subsection{Method \code{classify()}}{
PlaceHolder
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlowPredictor$classify(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{:}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-regress"></a>}}
\if{latex}{\out{\hypertarget{method-regress}{}}}
\subsection{Method \code{regress()}}{
PlaceHolder
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlowPredictor$regress(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{:}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-predict"></a>}}
\if{latex}{\out{\hypertarget{method-predict}{}}}
\subsection{Method \code{predict()}}{
Return the inference from the specified endpoint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlowPredictor$predict(data, initial_args = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(object): Input data for which you want the model to provide
inference. If a serializer was specified when creating the
Predictor, the result of the serializer is sent as input
data. Otherwise the data must be sequence of bytes, and the
predict method then sends the bytes in the request body as is.}

\item{\code{initial_args}}{(list[str,str]): Optional. Default arguments for boto3
``invoke_endpoint`` call. Default is NULL (no default
arguments).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TensorFlowPredictor$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
