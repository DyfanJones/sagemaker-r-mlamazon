% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sparkml_model.R
\name{SparkMLPredictor}
\alias{SparkMLPredictor}
\title{Performs predictions against an MLeap serialized SparkML model.}
\description{
The implementation of
             :meth:`~sagemaker.predictor.Predictor.predict` in this
             `Predictor` requires a json as input. The input should follow the
             json format as documented.
             ``predict()`` returns a csv output, comma separated if the output is a
             list.
}
\section{Super class}{
\code{\link[R6sagemaker.mlcore:Predictor]{R6sagemaker.mlcore::Predictor}} -> \code{SparkMLPredictor}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SparkMLPredictor$new()}}
\item \href{#method-clone}{\code{SparkMLPredictor$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="delete_endpoint">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-delete_endpoint}{\code{R6sagemaker.mlcore::Predictor$delete_endpoint()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="delete_model">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-delete_model}{\code{R6sagemaker.mlcore::Predictor$delete_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="disable_data_capture">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-disable_data_capture}{\code{R6sagemaker.mlcore::Predictor$disable_data_capture()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="enable_data_capture">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-enable_data_capture}{\code{R6sagemaker.mlcore::Predictor$enable_data_capture()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="endpoint_context">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-endpoint_context}{\code{R6sagemaker.mlcore::Predictor$endpoint_context()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="format">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-format}{\code{R6sagemaker.mlcore::Predictor$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="list_monitors">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-list_monitors}{\code{R6sagemaker.mlcore::Predictor$list_monitors()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="predict">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-predict}{\code{R6sagemaker.mlcore::Predictor$predict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="update_data_capture_config">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-update_data_capture_config}{\code{R6sagemaker.mlcore::Predictor$update_data_capture_config()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.mlcore" data-topic="Predictor" data-id="update_endpoint">}\href{../../R6sagemaker.mlcore/html/Predictor.html#method-update_endpoint}{\code{R6sagemaker.mlcore::Predictor$update_endpoint()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initializes a SparkMLPredictor which should be used with SparkMLModel
             to perform predictions against SparkML models serialized via MLeap. The
             response is returned in text/csv format which is the default response
             format for SparkML Serving container.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SparkMLPredictor$new(
  endpoint_name,
  sagemaker_session = NULL,
  serializer = CSVSerializer$new(),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{endpoint_name}}{(str): The name of the endpoint to perform inference on.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): Session object which
manages interactions with Amazon SageMaker APIs and any other
AWS services needed. If not specified, the estimator creates one
using the default AWS configuration chain.}

\item{\code{serializer}}{(sagemaker.serializers.BaseSerializer): Optional. Default
serializes input data to text/csv.}

\item{\code{...}}{: Additional parameters passed to the
:class:`~sagemaker.Predictor` constructor.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SparkMLPredictor$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
