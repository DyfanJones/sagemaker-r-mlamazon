% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/automl_automl.R
\name{AutoML}
\alias{AutoML}
\title{AutoML Class}
\description{
A class for creating and interacting with SageMaker AutoML jobs.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{AutoML$new()}}
\item \href{#method-fit}{\code{AutoML$fit()}}
\item \href{#method-attach}{\code{AutoML$attach()}}
\item \href{#method-describe_auto_ml_job}{\code{AutoML$describe_auto_ml_job()}}
\item \href{#method-best_candidate}{\code{AutoML$best_candidate()}}
\item \href{#method-list_candidates}{\code{AutoML$list_candidates()}}
\item \href{#method-create_model}{\code{AutoML$create_model()}}
\item \href{#method-deploy}{\code{AutoML$deploy()}}
\item \href{#method-validate_and_update_inference_response}{\code{AutoML$validate_and_update_inference_response()}}
\item \href{#method-format}{\code{AutoML$format()}}
\item \href{#method-clone}{\code{AutoML$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize AutoML class
             Place holder doc string
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$new(
  role,
  target_attribute_name,
  output_kms_key = NULL,
  output_path = NULL,
  base_job_name = NULL,
  compression_type = NULL,
  sagemaker_session = NULL,
  volume_kms_key = NULL,
  encrypt_inter_container_traffic = FALSE,
  vpc_config = NULL,
  problem_type = NULL,
  max_candidates = NULL,
  max_runtime_per_training_job_in_seconds = NULL,
  total_job_runtime_in_seconds = NULL,
  job_objective = NULL,
  generate_candidate_definitions_only = FALSE,
  tags = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{:}

\item{\code{target_attribute_name}}{:}

\item{\code{output_kms_key}}{:}

\item{\code{output_path}}{:}

\item{\code{base_job_name}}{:}

\item{\code{compression_type}}{:}

\item{\code{sagemaker_session}}{:}

\item{\code{volume_kms_key}}{:}

\item{\code{encrypt_inter_container_traffic}}{:}

\item{\code{vpc_config}}{:}

\item{\code{problem_type}}{:}

\item{\code{max_candidates}}{:}

\item{\code{max_runtime_per_training_job_in_seconds}}{:}

\item{\code{total_job_runtime_in_seconds}}{:}

\item{\code{job_objective}}{:}

\item{\code{generate_candidate_definitions_only}}{:}

\item{\code{tags}}{:}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fit"></a>}}
\if{latex}{\out{\hypertarget{method-fit}{}}}
\subsection{Method \code{fit()}}{
Create an AutoML Job with the input dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$fit(inputs = NULL, wait = TRUE, logs = TRUE, job_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputs}}{(str or list[str] or AutoMLInput): Local path or S3 Uri where the training data
is stored. Or an AutoMLInput object. If a local path is provided, the dataset will
be uploaded to an S3 location.}

\item{\code{wait}}{(bool): Whether the call should wait until the job completes (default: True).}

\item{\code{logs}}{(bool): Whether to show the logs produced by the job. Only meaningful when wait
is True (default: True). if ``wait`` is False, ``logs`` will be set to False as
well.}

\item{\code{job_name}}{(str): Training job name. If not specified, the estimator generates
a default job name, based on the training image name and current timestamp.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-attach"></a>}}
\if{latex}{\out{\hypertarget{method-attach}{}}}
\subsection{Method \code{attach()}}{
Attach to an existing AutoML job.
             Creates and returns a AutoML bound to an existing automl job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$attach(auto_ml_job_name, sagemaker_session = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{auto_ml_job_name}}{(str): AutoML job name}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): A SageMaker Session
object, used for SageMaker interactions (default: None). If not
specified, the one originally associated with the ``AutoML`` instance is used.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
sagemaker.automl.AutoML: A ``AutoML`` instance with the attached automl job.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-describe_auto_ml_job"></a>}}
\if{latex}{\out{\hypertarget{method-describe_auto_ml_job}{}}}
\subsection{Method \code{describe_auto_ml_job()}}{
Returns the job description of an AutoML job for the given job name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$describe_auto_ml_job(job_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{job_name}}{(str): The name of the AutoML job to describe.
If None, will use object's latest_auto_ml_job name.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: A dictionary response with the AutoML Job description.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-best_candidate"></a>}}
\if{latex}{\out{\hypertarget{method-best_candidate}{}}}
\subsection{Method \code{best_candidate()}}{
Returns the best candidate of an AutoML job for a given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$best_candidate(job_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{job_name}}{(str): The name of the AutoML job. If None, will use object's
.current_auto_ml_job_name.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: A dictionary with information of the best candidate.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-list_candidates"></a>}}
\if{latex}{\out{\hypertarget{method-list_candidates}{}}}
\subsection{Method \code{list_candidates()}}{
Returns the list of candidates of an AutoML job for a given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$list_candidates(
  job_name = NULL,
  status_equals = NULL,
  candidate_name = NULL,
  candidate_arn = NULL,
  sort_order = NULL,
  sort_by = NULL,
  max_results = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{job_name}}{(str): The name of the AutoML job. If None, will use object's
.current_job name.}

\item{\code{status_equals}}{(str): Filter the result with candidate status, values could be
"Completed", "InProgress", "Failed", "Stopped", "Stopping"}

\item{\code{candidate_name}}{(str): The name of a specified candidate to list.
Default to None.}

\item{\code{candidate_arn}}{(str): The Arn of a specified candidate to list.
Default to None.}

\item{\code{sort_order}}{(str): The order that the candidates will be listed in result.
Default to None.}

\item{\code{sort_by}}{(str): The value that the candidates will be sorted by.
Default to None.}

\item{\code{max_results}}{(int): The number of candidates will be listed in results,
between 1 to 100. Default to None. If None, will return all the candidates.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
list: A list of dictionaries with candidates information.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_model"></a>}}
\if{latex}{\out{\hypertarget{method-create_model}{}}}
\subsection{Method \code{create_model()}}{
Creates a model from a given candidate or the best candidate from the job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$create_model(
  name,
  sagemaker_session = NULL,
  candidate = NULL,
  vpc_config = NULL,
  enable_network_isolation = FALSE,
  model_kms_key = NULL,
  predictor_cls = NULL,
  inference_response_keys = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(str): The pipeline model name.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): A SageMaker Session
object, used for SageMaker interactions (default: None). If not
specified, the one originally associated with the ``AutoML`` instance is used.:}

\item{\code{candidate}}{(CandidateEstimator or dict): a CandidateEstimator used for deploying
to a SageMaker Inference Pipeline. If None, the best candidate will
be used. If the candidate input is a dict, a CandidateEstimator will be
created from it.}

\item{\code{vpc_config}}{(dict): Specifies a VPC that your training jobs and hosted models have
access to. Contents include "SecurityGroupIds" and "Subnets".}

\item{\code{enable_network_isolation}}{(bool): Isolates the training container. No inbound or
outbound network calls can be made, except for calls between peers within a
training cluster for distributed training. Default: False}

\item{\code{model_kms_key}}{(str): KMS key ARN used to encrypt the repacked
model archive file if the model is repacked}

\item{\code{predictor_cls}}{(callable[string, sagemaker.session.Session]): A
function to call to create a predictor (default: None). If
specified, ``deploy()``  returns the result of invoking this
function on the created endpoint name.}

\item{\code{inference_response_keys}}{(list): List of keys for response content. The order of the
keys will dictate the content order in the response.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PipelineModel object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-deploy"></a>}}
\if{latex}{\out{\hypertarget{method-deploy}{}}}
\subsection{Method \code{deploy()}}{
Deploy a candidate to a SageMaker Inference Pipeline.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$deploy(
  initial_instance_count,
  instance_type,
  serializer = NULL,
  deserializer = NULL,
  candidate = NULL,
  sagemaker_session = NULL,
  name = NULL,
  endpoint_name = NULL,
  tags = NULL,
  wait = TRUE,
  vpc_config = NULL,
  enable_network_isolation = FALSE,
  model_kms_key = NULL,
  predictor_cls = NULL,
  inference_response_keys = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{initial_instance_count}}{(int): The initial number of instances to run
in the ``Endpoint`` created from this ``Model``.}

\item{\code{instance_type}}{(str): The EC2 instance type to deploy this Model to.
For example, 'ml.p2.xlarge'.}

\item{\code{serializer}}{(:class:`~sagemaker.serializers.BaseSerializer`): A
serializer object, used to encode data for an inference endpoint
(default: None). If ``serializer`` is not None, then
``serializer`` will override the default serializer. The
default serializer is set by the ``predictor_cls``.}

\item{\code{deserializer}}{(:class:`~sagemaker.deserializers.BaseDeserializer`): A
deserializer object, used to decode data from an inference}

\item{\code{candidate}}{(CandidateEstimator or dict): a CandidateEstimator used for deploying
to a SageMaker Inference Pipeline. If None, the best candidate will
be used. If the candidate input is a dict, a CandidateEstimator will be
created from it.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): A SageMaker Session
object, used for SageMaker interactions (default: None). If not
specified, the one originally associated with the ``AutoML`` instance is used.}

\item{\code{name}}{(str): The pipeline model name. If None, a default model name will
be selected on each ``deploy``.}

\item{\code{endpoint_name}}{(str): The name of the endpoint to create (default:
None). If not specified, a unique endpoint name will be created.}

\item{\code{tags}}{(List[dict[str, str]]): The list of tags to attach to this
specific endpoint.}

\item{\code{wait}}{(bool): Whether the call should wait until the deployment of
model completes (default: True).}

\item{\code{vpc_config}}{(dict): Specifies a VPC that your training jobs and hosted models have
access to. Contents include "SecurityGroupIds" and "Subnets".}

\item{\code{enable_network_isolation}}{(bool): Isolates the training container. No inbound or
outbound network calls can be made, except for calls between peers within a
training cluster for distributed training. Default: False}

\item{\code{model_kms_key}}{(str): KMS key ARN used to encrypt the repacked
model archive file if the model is repacked}

\item{\code{predictor_cls}}{(callable[string, sagemaker.session.Session]): A
function to call to create a predictor (default: None). If
specified, ``deploy()``  returns the result of invoking this
function on the created endpoint name.}

\item{\code{inference_response_keys}}{(list): List of keys for response content. The order of the
keys will dictate the content order in the response.}

\item{\code{endpoint}}{(default: None). If ``deserializer`` is not None, then
``deserializer`` will override the default deserializer. The
default deserializer is set by the ``predictor_cls``.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
callable[string, sagemaker.session.Session] or ``None``:
             If ``predictor_cls`` is specified, the invocation of ``self.predictor_cls`` on
             the created endpoint name. Otherwise, ``None``.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate_and_update_inference_response"></a>}}
\if{latex}{\out{\hypertarget{method-validate_and_update_inference_response}{}}}
\subsection{Method \code{validate_and_update_inference_response()}}{
Validates the requested inference keys and updates response content.
             On validation, also updates the inference containers to emit appropriate response
             content in the inference response.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$validate_and_update_inference_response(
  inference_containers,
  inference_response_keys
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inference_containers}}{(list): list of inference containers}

\item{\code{inference_response_keys}}{(list): list of inference response keys}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AutoML$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
